{"version":3,"sources":["api.tsx","store/reducerPost.ts","store/reducerComments.tsx","store/rootReducer.ts","store/main.ts","components/NewCommentForm/NewCommentForm.tsx","components/EditPostForm/EditPostForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/NewPostForm/NewPostForm.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","response","ok","Error","json","initialState","posts","selectedPost","handleEdit","addEditPost","newPost","id","title","body","console","log","newPosts","filter","post","createPost","value","idArray","map","Math","max","apply","comments","createComment","postId","comment","item","rootReducer","combineReducers","reducerPost","state","action","type","reducerComments","store","createStore","composeWithDevTools","applyMiddleware","thunk","NewCommentForm","useState","changeComment","useSelector","dispatch","useDispatch","className","name","required","placeholder","onChange","event","target","onClick","EditPostForm","currentPost","find","newTitle","changeTitle","newBbody","changeBody","PostDetails","currentComemnts","length","PostsList","NewPostForm","App","useEffect","result","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.626e8022.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst API_URL = `https://bloggy-api.herokuapp.com/`;\n\nexport const request = (url: string) => {\n  const data = fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n\n  return data;\n};\n","/* eslint-disable no-console */\nimport { request } from '../api';\nimport { Post } from '../react-app-env';\n\nconst initialState = {\n  posts: [],\n  selectedPost: 0,\n  handleEdit: false,\n};\n\nexport function postsSuccess(posts: any) {\n  return {\n    type: 'postsSuccess',\n    posts,\n  };\n}\n\nexport function postsFetchData() {\n  return (dispatch : any) => request('posts')\n    .then(result => dispatch(postsSuccess(result)));\n}\n\nexport function deletePost(postId: number) {\n  return {\n    type: 'deletePost',\n    postId,\n  };\n}\n\nexport function selectPost(postId: number) {\n  return {\n    type: 'change',\n    postId,\n  };\n}\n\nexport function EditPost() {\n  return {\n    type: 'edit',\n  };\n}\n\ntype NewPost = [number, string, string];\n\nfunction addEditPost(posts: Post[], newPost: NewPost) {\n  const [id, title, body] = newPost;\n\n  console.log(newPost);\n\n  const newPosts = posts.filter((post: Post) => post.id !== id);\n\n  return [...newPosts, { id, title, body }];\n}\n\ntype PostDetalils = [string, string];\n\nfunction createPost(posts: Post[], value: PostDetalils) {\n  const [title, body] = value;\n\n  const idArray = posts.map((post: Post) => post.id);\n\n  return {\n    id: Math.max.apply(null, idArray) + 1,\n    title,\n    body,\n  };\n}\n\nexport function reducerPost(state = initialState, action: any) {\n  switch (action.type) {\n    case 'postsSuccess':\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case 'addPost':\n      return {\n        ...state,\n        posts: [...state.posts, createPost(state.posts, action.post)],\n      };\n    case 'deletePost':\n      return {\n        ...state,\n        posts: state.posts.filter((post: Post) => post.id !== action.postId),\n      };\n    case 'edit':\n      return {\n        ...state,\n        handleEdit: !state.handleEdit,\n      };\n    case 'editPost':\n      return {\n        ...state,\n        posts: addEditPost(state.posts, action.post),\n      };\n    case 'change':\n      if (action.postId === state.selectedPost) {\n        return {\n          ...state,\n          selectedPost: 0,\n        };\n      }\n\n      return {\n        ...state,\n        selectedPost: action.postId,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { request } from '../api';\nimport { Comment } from '../react-app-env';\n\nconst initialState = {\n  comments: [],\n};\n\nexport function commentsSuccess(comments: any) {\n  return {\n    type: 'commentsSuccess',\n    comments,\n  };\n}\n\nexport function commentsFetchData() {\n  return (dispatch : any) => request('comments')\n    .then(result => dispatch(commentsSuccess(result)));\n}\n\ntype CommentDetalils = [number, string];\n\nfunction createComment(comments: Comment[], value: CommentDetalils) {\n  const [postId, comment] = value;\n\n  const idArray = comments.map((item: Comment) => item.id);\n\n  return {\n    id: Math.max.apply(null, idArray) + 1,\n    postId,\n    body: comment,\n  };\n}\n\nexport function reducerComments(state = initialState, action: any) {\n  switch (action.type) {\n    case 'commentsSuccess':\n      return {\n        ...state,\n        comments: action.comments,\n      };\n    case 'addComment':\n      return {\n        ...state,\n        comments: [...state.comments, createComment(state.comments, action.comment)],\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducerPost } from './reducerPost';\nimport { reducerComments } from './reducerComments';\n\nexport const rootReducer = combineReducers({\n  reducerPost,\n  reducerComments,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './rootReducer';\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { State } from '../../react-app-env';\n\nexport const NewCommentForm: React.FC = () => {\n  const [comment, changeComment] = useState('');\n  const { selectedPost } = useSelector((state: State) => state.reducerPost);\n  const dispatch = useDispatch();\n\n  const generateComment = () => {\n    return {\n      type: 'addComment',\n      comment: [selectedPost, comment],\n    };\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          required\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => changeComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => {\n          if (comment !== '') {\n            dispatch(generateComment());\n            changeComment('');\n          }\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { State, Post } from '../../react-app-env';\nimport './EditPostForm.scss';\n\nexport const EditPostForm: React.FC = () => {\n  const { posts, selectedPost } = useSelector((state: State) => state.reducerPost);\n  const currentPost = posts.find((post: Post) => post.id === selectedPost) || null;\n  const [newTitle, changeTitle] = useState(currentPost?.title || '');\n  const [newBbody, changeBody] = useState(currentPost?.body || '');\n  const dispatch = useDispatch();\n\n  const generateNewPost = () => {\n    return {\n      type: 'editPost',\n      post: [selectedPost, newTitle, newBbody],\n    };\n  };\n\n  return (\n    currentPost && (\n      <form className=\"EditPostForm\">\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={newTitle}\n            className=\"EditPostForm__input\"\n            onChange={event => changeTitle(event.target.value)}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"body\"\n            value={newBbody}\n            className=\"EditPostForm__input\"\n            onChange={event => changeBody(event.target.value)}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"EditPostForm__submit-button button\"\n          onClick={() => {\n            dispatch(generateNewPost());\n          }}\n        >\n          Add\n        </button>\n      </form>\n    )\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Post, State, Comment } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { EditPostForm } from '../EditPostForm';\nimport { EditPost } from '../../store/reducerPost';\n\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const { posts, selectedPost, handleEdit } = useSelector((state: State) => state.reducerPost);\n  const { comments } = useSelector((state: State) => state.reducerComments);\n  const currentPost = posts.find((post: Post) => post.id === selectedPost) || null;\n  const currentComemnts = comments.filter((comment: Comment) => comment.postId === selectedPost);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>{currentPost?.title}</h2>\n\n      <section className=\"PostDetails__post\">\n        {currentPost && (\n          currentPost.body ? (<p>{currentPost.body}</p>) : 'There is no body in this Post'\n        )}\n        {}\n      </section>\n      <button\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={() => dispatch(EditPost())}\n      >\n        Edit post\n      </button>\n      {handleEdit && (\n        <EditPostForm />\n      )}\n\n      <section className=\"PostDetails__comments\">\n        {currentComemnts.length ? (\n          currentComemnts.map((comment: any) => {\n            const { body, id } = comment;\n\n            return (\n              <li key={id} className=\"PostDetails__list-item\">\n                <h4>{`Comment ID #${id}`}</h4>\n                <p>{body}</p>\n              </li>\n            );\n          })\n        ) : 'There is no comment'}\n        <ul className=\"PostDetails__list\" />\n      </section>\n\n      <section>\n        <h2>Add Comment</h2>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Post, State } from '../../react-app-env';\nimport './PostsList.scss';\nimport { deletePost, selectPost } from '../../store/reducerPost';\n\nexport const PostsList: React.FC = () => {\n  const { posts, selectedPost } = useSelector((state: State) => state.reducerPost);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post: Post) => {\n          const { title, id } = post;\n\n          return (\n            <li key={id} className=\"PostsList__item\">\n              <h4>{title}</h4>\n              <div className=\"PostsList__buttons\">\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => dispatch(selectPost(id))}\n                >\n                  {(selectedPost === id) ? 'Close' : 'Open'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => dispatch(deletePost(id))}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './NewPostForm.scss';\n\nexport const NewPostForm: React.FC = () => {\n  const [title, changeTitle] = useState('');\n  const [body, changeBody] = useState('');\n  const dispatch = useDispatch();\n\n  const generatePost = () => {\n    return {\n      type: 'addPost',\n      post: [title, body],\n    };\n  };\n\n  return (\n    <form className=\"NewPostForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          required\n          placeholder=\"Your title\"\n          className=\"NewPostForm__input\"\n          onChange={event => changeTitle(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"body\"\n          value={body}\n          required\n          placeholder=\"Your body\"\n          className=\"NewPostForm__input\"\n          onChange={event => changeBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewPostForm__submit-button button\"\n        onClick={() => {\n          if (body !== '' && title !== '') {\n            dispatch(generatePost());\n            changeBody('');\n            changeTitle('');\n          }\n        }}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { postsFetchData } from './store/reducerPost';\nimport { commentsFetchData } from './store/reducerComments';\nimport './App.scss';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsList } from './components/PostsList';\nimport { NewPostForm } from './components/NewPostForm';\n\nconst App: React.FC = () => {\n  const { selectedPost } = useSelector((state: any) => state.reducerPost);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(postsFetchData());\n  }, []);\n\n  useEffect(() => {\n    dispatch(commentsFetchData());\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <h2>List of Posts</h2>\n        </header>\n\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList />\n          </div>\n\n          <div className=\"App__content\">\n            <h2>Create new Post</h2>\n            <NewPostForm />\n            {selectedPost ? <PostDetails /> : <h2>Open Post details</h2>}\n\n          </div>\n        </main>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/main';\n\nimport App from './App';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}